/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from './lazy.module';
import * as import2 from '@angular/common/src/common_module';
import * as import3 from '@angular/common/src/localization';
import * as import4 from '@angular/core/src/di/injector';
import * as import5 from '@angular/core/src/i18n/tokens';
import * as import6 from '@angular/core/src/linker/view';
import * as import7 from '@angular/core/src/render/api';
import * as import8 from '@angular/core/src/linker/view_utils';
import * as import9 from '@angular/core/src/metadata/view';
import * as import10 from '@angular/core/src/linker/view_type';
import * as import11 from '@angular/core/src/change_detection/constants';
import * as import12 from '@angular/core/src/linker/component_factory';
class LazyInjector extends import0.NgModuleInjector<import1.Lazy> {
  _CommonModule_0:import2.CommonModule;
  _Lazy_1:import1.Lazy;
  __NgLocalization_2:import3.NgLocaleLocalization;
  constructor(parent:import4.Injector) {
    super(parent,[LazyCompNgFactory],([] as any[]));
  }
  get _NgLocalization_2():import3.NgLocaleLocalization {
    if ((this.__NgLocalization_2 == null)) { (this.__NgLocalization_2 = new import3.NgLocaleLocalization(this.parent.get(import5.LOCALE_ID))); }
    return this.__NgLocalization_2;
  }
  createInternal():import1.Lazy {
    this._CommonModule_0 = new import2.CommonModule();
    this._Lazy_1 = new import1.Lazy();
    return this._Lazy_1;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.CommonModule)) { return this._CommonModule_0; }
    if ((token === import1.Lazy)) { return this._Lazy_1; }
    if ((token === import3.NgLocalization)) { return this._NgLocalization_2; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const LazyNgFactory:import0.NgModuleFactory<import1.Lazy> = new import0.NgModuleFactory(LazyInjector,import1.Lazy);
export class Wrapper_LazyComp {
  /*private*/ _eventHandler:Function;
  context:import1.LazyComp;
  /*private*/ _changed:boolean;
  constructor() {
    this._changed = false;
    this.context = new import1.LazyComp();
  }
  ngOnDetach(view:import6.AppView<any>,componentView:import6.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import6.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import6.AppView<any>,componentView:import6.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import6.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_LazyComp_Host:import7.RenderComponentType = import8.createRenderComponentType('',0,import9.ViewEncapsulation.None,([] as any[]),{});
class View_LazyComp_Host0 extends import6.AppView<any> {
  _el_0:any;
  compView_0:import6.AppView<import1.LazyComp>;
  _LazyComp_0_3:Wrapper_LazyComp;
  constructor(viewUtils:import8.ViewUtils,parentView:import6.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_LazyComp_Host0,renderType_LazyComp_Host,import10.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import11.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import12.ComponentRef<any> {
    this._el_0 = import8.selectOrCreateRenderHostElement(this.renderer,'lazy-comp',import8.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_LazyComp0(this.viewUtils,this,0,this._el_0);
    this._LazyComp_0_3 = new Wrapper_LazyComp();
    this.compView_0.create(this._LazyComp_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import12.ComponentRef_<any>(0,this,this._el_0,this._LazyComp_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.LazyComp) && (0 === requestNodeIndex))) { return this._LazyComp_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._LazyComp_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const LazyCompNgFactory:import12.ComponentFactory<import1.LazyComp> = new import12.ComponentFactory<import1.LazyComp>('lazy-comp',View_LazyComp_Host0,import1.LazyComp);
const styles_LazyComp:any[] = ([] as any[]);
var renderType_LazyComp:import7.RenderComponentType = import8.createRenderComponentType('',0,import9.ViewEncapsulation.None,styles_LazyComp,{});
export class View_LazyComp0 extends import6.AppView<import1.LazyComp> {
  _text_0:any;
  constructor(viewUtils:import8.ViewUtils,parentView:import6.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_LazyComp0,renderType_LazyComp,import10.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import11.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import12.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'hi',(null as any));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [this._text_0]),(null as any));
    return (null as any);
  }
}